import {cva} from 'cva';
import type {HTMLAttributes} from 'react';
import {forwardRef} from 'react';
import * as PlatformIconProxy from 'toolbar/components/icon/PlatformIconProxy';
import type {IconProps} from 'toolbar/components/icon/types';
import {iconSizes} from 'toolbar/components/icon/types';
import {useIconDefaultsContext} from 'toolbar/context/IconDefaultsContext';

const PLATFORM_TO_ICON: Record<string, keyof typeof PlatformIconProxy> = {
  amazon: 'amazon',
  amd: 'amd',
  android: 'android',
  'android-phone': 'androidPhone',
  'android-tablet': 'androidTablet',
  anthropic: 'anthropic',
  apple: 'apple',
  'apple-ipad': 'appleIPad',
  'apple-iphone': 'appleIPhone',
  'apple-tv': 'appleTV',
  'apple-watch': 'appleWatch',
  arm: 'arm',
  bun: 'bun',
  capacitor: 'capacitor',
  chrome: 'chrome',
  chromium: 'chromium',
  clojure: 'clojure',
  cocoa: 'apple',
  'cocoa-objc': 'apple',
  'cocoa-swift': 'swift',
  cohere: 'cohere',
  cordova: 'cordova',
  cloudflare: 'cloudflare',
  cpp: 'cpp',
  cryengine: 'cryengine',
  crystal: 'crystal',
  css: 'css',
  csharp: 'csharp',
  'csharp-aspnetcore': 'csharp',
  dart: 'dart',
  default: '_default',
  deno: 'deno',
  dotnet: 'dotnet',
  'dotnet-aspnetcore': 'dotnet',
  'dotnet-aspnet': 'dotnet',
  'dotnet-awslambda': 'awslambda',
  'dotnet-blazor': 'blazor',
  'dotnet-csharp': 'csharp',
  'dotnet-gcpfunctions': 'gcpFunctions',
  'dotnet-maui': 'maui',
  'dotnet-uno': 'uno',
  'dotnet-xamarin': 'xamarin',
  dotnetcore: 'dotnetcore',
  dotnetfx: 'dotnetfx',
  dotnetframework: 'dotnetframework',
  edge: 'edge',
  'edge-legacy': 'edgeLegacy',
  electron: 'electron',
  elixir: 'elixir',
  firefox: 'firefox',
  flutter: 'flutter',
  font: 'font',
  fsharp: 'fsharp',
  git: 'git',
  go: 'go',
  'go-echo': 'echo',
  'go-fasthttp': 'fasthttp',
  'go-fiber': 'fiber',
  'go-gin': 'gin',
  'go-iris': 'iris',
  'go-martini': 'martini',
  'go-negroni': 'go',
  godot: 'godot',
  huggingface: 'huggingface',
  'internet-explorer': 'internetExplorer',
  java: 'java',
  'java-appengine': 'appEngine',
  'java-android': 'android',
  'java-log4j': 'java',
  'java-log4j2': 'java',
  'java-logback': 'logback',
  'java-logging': 'java',
  'java-ray': 'ray',
  'java-spring': 'spring',
  'java-spring-boot': 'springboot',
  javascript: 'javascript',
  'javascript-alpinejs': 'alpinejs',
  'javascript-analogjs': 'analogjs',
  'javascript-angular': 'angularjs',
  'javascript-angularjs': 'angularjs',
  'javascript-astro': 'astro',
  'javascript-backbone': 'backbone',
  'javascript-browser': 'javascript',
  'javascript-capacitor': 'capacitor',
  'javascript-cordova': 'cordova',
  'javascript-electron': 'electron',
  'javascript-ember': 'ember',
  'javascript-gatsby': 'gatsby',
  'javascript-hono': 'hono',
  'javascript-hydrogen': 'hydrogen',
  'javascript-ionic': 'ionic',
  'javascript-lit': 'lit',
  'javascript-meteor': 'meteor',
  'javascript-million': 'million',
  'javascript-nextjs': 'nextjs',
  'javascript-nuxt': 'nuxt',
  'javascript-opennext': 'opennext',
  'javascript-qwik': 'qwik',
  'javascript-react': 'react',
  'javascript-remix': 'remix',
  'javascript-solid': 'solid',
  'javascript-solidstart': 'solidstart',
  'javascript-svelte': 'svelte',
  'javascript-sveltekit': 'svelte',
  'javascript-vue': 'vue',
  'javascript-wasm': 'wasm',
  'javascript-node': 'nodejs',
  'javascript-awslambda': 'awslambda',
  'javascript-azurefunctions': 'azureFunctions',
  'javascript-connect': 'connect',
  'javascript-express': 'express',
  'javascript-fastify': 'fastify',
  'javascript-gcpfunctions': 'gcpFunctions',
  'javascript-hapi': 'hapi',
  'javascript-koa': 'koa',
  'javascript-nestjs': 'nestjs',
  'javascript-serverlesscloud': 'serverless',
  ionic: 'ionic',
  kotlin: 'kotlin',
  'kotlin-android': 'android',
  langchain: 'langchain',
  linux: 'linux',
  mono: 'mono',
  motorola: 'motorola',
  native: 'nativec',
  'native-qt': 'qt',
  nintendo: 'nintendo',
  'nintendo-switch': 'nintendoSwitch',
  node: 'nodejs',
  'node-awslambda': 'awslambda',
  'node-azurefunctions': 'azureFunctions',
  'node-connect': 'connect',
  'node-express': 'express',
  'node-fastify': 'fastify',
  'node-gcpfunctions': 'gcpFunctions',
  'node-hapi': 'hapi',
  'node-koa': 'koa',
  'node-nestjs': 'nestjs',
  'node-serverlesscloud': 'serverless',
  nvidia: 'nvidia',
  openai: 'openai',
  opera: 'opera',
  perl: 'perl',
  php: 'php',
  playstation: 'playstation',
  powershell: 'powershell',
  'php-laravel': 'laravel',
  'php-livewire': 'livewire',
  'php-magento': 'magento',
  'php-monolog': 'php',
  'php-symfony2': 'symfony',
  'php-symfony': 'symfony',
  python: 'python',
  'python-aiohttp': 'aiohttp',
  'python-airflow': 'apacheAirflow',
  'python-ariadne': 'ariadne',
  'python-asyncpg': 'postgresql',
  'python-awslambda': 'awslambda',
  'python-azurefunctions': 'azureFunctions',
  'python-beam': 'apacheBeam',
  'python-boto3': 'aws',
  'python-bottle': 'bottle',
  'python-celery': 'celery',
  'python-chalice': 'chalice',
  'python-clickhouse-driver': 'clickhouse',
  'python-django': 'django',
  'python-dramatiq': 'dramatiq',
  'python-falcon': 'falcon',
  'python-fastapi': 'fastapi',
  'python-flask': 'flask',
  'python-gcpfunctions': 'gcpFunctions',
  'python-gnu_backtrace': 'gnu',
  'python-gql': 'graphql',
  'python-graphene': 'graphene',
  'python-grpc': 'grpc',
  'python-httpx': 'httpx',
  'python-huey': 'huey',
  'python-litestar': 'litestar',
  'python-loguru': 'loguru',
  'python-pylons': 'python',
  'python-pymongo': 'mongodb',
  'python-pyramid': 'pyramid',
  'python-pythonawslambda': 'awslambda',
  'python-quart': 'quart',
  'python-ray': 'ray',
  'python-redis': 'redis',
  'python-rq': 'redis',
  'python-sanic': 'sanic',
  'python-serverless': 'serverless',
  'python-starlette': 'starlette',
  'python-strawberry': 'strawberry',
  'python-spark': 'apacheSpark',
  'python-sqlalchemy': 'sqlalchemy',
  'python-tornado': 'tornado',
  'python-tryton': 'tryton',
  qq: 'qq',
  qt: 'qt',
  'react-native': 'reactNative',
  ruby: 'ruby',
  'ruby-activeadmin': 'activeadmin',
  'ruby-grape': 'grape',
  'ruby-hanami': 'hanami',
  'ruby-padrino': 'padrino',
  'ruby-rack': 'ruby',
  'ruby-rails': 'rails',
  'ruby-sidekiq': 'sidekiq',
  'ruby-sinatra': 'sinatra',
  'ruby-trailblazer': 'trailblazer',
  rust: 'rust',
  'rust-actix': 'actix',
  safari: 'safari',
  samsung: 'samsung',
  scala: 'scala',
  stride3d: 'stride3d',
  sql: 'sql',
  sqlserver: 'sqlserver',
  swift: 'swift',
  tauri: 'tauri',
  ubuntu: 'ubuntu',
  unity: 'unity',
  // This will be deprecated in favor of 'unrealengine'
  ue4: 'unreal',
  unreal: 'unreal',
  unrealengine: 'unreal',
  visualbasic: 'visualBasic',
  vscode: 'vscode',
  windows: 'windows',
  // Don't add new platforms down here!
  // Please add them where they belong alphabetically
} as const;

interface Props extends IconProps, HTMLAttributes<typeof HTMLElement> {
  platform: keyof typeof PLATFORM_TO_ICON;
  isLoading?: boolean;
}

const wrapperClass = cva('relative bg-surface-100', {
  variants: {
    isLoading: {
      true: 'rounded-sm',
      false: '',
    },
  },
});

const PlatformIcon = forwardRef<HTMLDivElement, Props>(function PlatformIcon(
  {platform, isLoading, ...iconProps}: Props,
  ref
) {
  const {size: providedSize = 'sm', ...rest} = useIconDefaultsContext(iconProps);
  const size = iconSizes[providedSize];

  const iconName = PLATFORM_TO_ICON[platform] ?? '_default';
  const Icon = PlatformIconProxy[iconName];
  return (
    <div
      {...rest}
      className={wrapperClass({isLoading})}
      style={{width: size, height: size, ...iconProps.style}}
      ref={ref}>
      {isLoading ? null : <Icon />}
    </div>
  );
});
export default PlatformIcon;

export const PLATFORMS = Object.keys(PLATFORM_TO_ICON);
